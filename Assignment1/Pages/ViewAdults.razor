@page "/view"

@using Assignment1.Data
@inject IAdultService AdultService
@using Models

<h1>Table of adults</h1>

@if (adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <input type="text" @bind-value="searchTerm" @bind-value:event="oninput"/>
    <br/>
    <br/>
    <table class="table table-bordered table-hover">
        <thead>
        <tr>
            <th class="sort-th" @onclick="@(() => SortTable("Id"))">
                            ID
                            <span class="oi @(SetSortIcon("Id"))"></span>
                        </th>
            <th class="sort-th" @onclick="@(() => SortTable("FirstName"))">
                First Name
                <span class="oi @(SetSortIcon("FirstName"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("LastName"))">
                Last Name
                <span class="oi @(SetSortIcon("LastName"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("HairColor"))">
                Hair
                <span class="oi @(SetSortIcon("HairColor"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("EyeColor"))">
                Eyes
                <span class="oi @(SetSortIcon("EyeColor"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("Age"))">
                Age
                <span class="oi @(SetSortIcon("Age"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("Height"))">
                Height
                <span class="oi @(SetSortIcon("Height"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("Weight"))">
                Weight
                <span class="oi @(SetSortIcon("Weight"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("Sex"))">
                Sex
                <span class="oi @(SetSortIcon("Sex"))"></span>
            </th>
            <th class="sort-th" @onclick="@(() => SortTable("JobTitle"))">
                Job
                <span class="oi @(SetSortIcon("JobTitle"))"></span>
            </th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in filteredAdults)
        {
            <tr>
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Height</td>
                <td>@adult.Weight</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle</td>
                <td>
                    <span class="btn btn-danger" @onclick="() => Remove(adult)">Delete</span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adults;
    private string searchTerm = "";
    private bool isSortedAscending;
    private string activeSortColumn;
    public IList<Adult> filteredAdults => adults.Where(i => i.FirstName.ToLower().StartsWith(searchTerm.ToLower())).ToList();

    protected override async Task OnInitializedAsync()
    {
        adults = await AdultService.getAdult();
    }

    private void Remove(Adult adultToRemove)
    {
        AdultService.Remove(adultToRemove);
        adults.Remove(adultToRemove);
        StateHasChanged();
    }
    
    private void SortTable(string columnName)
    {
        Console.WriteLine(columnName);
        if (columnName != activeSortColumn)
        {
            adults = AdultService.getAdult().Result.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
            StateHasChanged();
        }
        else
        {
            if (isSortedAscending)
            {
                adults = AdultService.getAdult().Result.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
                StateHasChanged();
            }
            else
            {
               adults = AdultService.getAdult().Result.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
                StateHasChanged();
            }
            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "oi-arrow-top";
        }
        return "oi-arrow-bottom";
    }

}